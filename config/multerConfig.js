import multer from "multer";
import { extname, resolve, dirname } from "path"; // Adicione 'dirname' aqui
import { fileURLToPath } from "url"; // Importa a fun√ß√£o necess√°ria

// --- IN√çCIO DA CORRE√á√ÉO PARA __dirname EM M√ìDULOS ES ---

// 1. Obt√©m o caminho do arquivo atual
const __filename = fileURLToPath(import.meta.url);

// 2. Obt√©m o caminho do diret√≥rio (o novo __dirname)
const __dirname = dirname(__filename);

// --- FIM DA CORRE√á√ÉO ---

// Define a pasta de destino
const ROTA_UPLOAD = resolve(__dirname, "..", "uploads", "images");

const aleatorio = () => Math.floor(Math.random() * 10000 + 10000);

// Define a configura√ß√£o de Storage (onde salvar e como nomear)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, ROTA_UPLOAD);
  },
  filename: (req, file, cb) => {
    // üí° Melhoria: Substituir espa√ßos por '_' no nome do arquivo gerado
    const nomeArquivo = `${Date.now()}_${aleatorio()}${extname(
      file.originalname
    )}`;
    cb(null, nomeArquivo);
  },
});

// üèÜ Exporta o OBJETO DE CONFIGURA√á√ÉO que ser√° passado para multer() no arquivo de rotas.
export default {
  storage,
  // ‚úÖ POSICIONAMENTO CORRETO: O fileFilter vai aqui, junto com storage
  fileFilter: (req, file, cb) => {
    if (file.mimetype !== "image/png" && file.mimetype !== "image/jpeg") {
      // O MulterError exige que o primeiro argumento da callback seja o erro.
      // ‚ùå Se for erro, o segundo argumento deve ser 'false'
      return cb(
        new multer.MulterError(
          "FILE_TYPE_ERROR",
          "Arquivo precisa ser PNG ou JPG"
        ),
        false
      );
    }
    // ‚úÖ Se n√£o houver erro, o segundo argumento deve ser 'true'
    return cb(null, true);
  },
};
